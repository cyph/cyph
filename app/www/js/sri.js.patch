91a92,110
> 				var ipfsFetch	=
> 					self.cordovaRequire ?
> 						self.cordovaRequire('ipfs-fetch') :
> 					self.cordovaNodeJS ?
> 						function (hash, options) {
> 							return self.cordovaNodeJS.then(function (o) {
> 								return o.ipfsFetch(hash, options);
> 							}).then(function (bytesEncoded) {
> 								return superSphincs._sodiumUtil.from_base64(bytesEncoded);
> 							})
> 						} :
> 						undefined
> 				;
> 
> 				var ipfsFetchResult		= ipfsFetch ?
> 					ipfsFetch(ipfsHash) :
> 					Promise.reject('ipfs-fetch unavailable.')
> 				;
> 
94,103c113,136
< 				function fetchIPFSResource () {
< 					return fetchWithTimeout(
< 						packageMetadata.gateways[packageGatewayIndex].replace(
< 							':hash',
< 							ipfsHash
< 						),
< 						undefined,
< 						'blob',
< 						timeout
< 					).then(fromBlob).then(function (bytes) {
---
> 				function fetchIPFSResource (fallback) {
> 					var gatewayFetchResult	= !fallback ?
> 						fetchWithTimeout(
> 							packageMetadata.gateways[packageGatewayIndex].replace(
> 								':hash',
> 								ipfsHash
> 							),
> 							undefined,
> 							'blob',
> 							timeout
> 						).then(fromBlob) :
> 						undefined
> 					;
> 
> 					return (
> 						gatewayFetchResult ?
> 							Promise.race([
> 								gatewayFetchResult,
> 								ipfsFetchResult.catch(function () {
> 									return gatewayFetchResult;
> 								})
> 							]) :
> 							ipfsFetchResult
> 					).then(function (bytes) {
137a171,173
> 						else if (ipfsFetch && !fallback) {
> 							return fetchIPFSResource(true);
> 						}
