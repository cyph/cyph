49d48
< var packageName		= 'cyph.app';
51,52c50,51
< if (storage.betaTestUser) {
< 	packageName		= 'beta.cyph.app';
---
> var alternateTestEnvironmentOrigin;
> var packageName;
54,55d52
< 	if (!storage.betaTestInitialized) {
< 		storage.betaTestInitialized	= true;
57,61c54,88
< 		delete storage.webSignExpires;
< 		delete storage.webSignHashWhitelist;
< 		delete storage.webSignPackageMetadata;
< 		delete storage.webSignPackageName;
< 		delete storage.webSignPackageTimestamp;
---
> var alternateTestEnvironment;
> 
> try {
> 	alternateTestEnvironment	= prompt(
> 		'Enter the hostname or IP address of a local test environment, ' +
> 		'or hit cancel to use a hosted test environment:',
> 		storage.alternateTestEnvironment
> 	);
> }
> catch (_) {
> 	if (confirm('Use localhost?')) {
> 		alternateTestEnvironment	= 'localhost';
> 	}
> }
> 
> if (typeof alternateTestEnvironment === 'string') {
> 	alternateTestEnvironmentOrigin		= 'http://' + alternateTestEnvironment + ':42002'
> 	storage.alternateTestEnvironment	= alternateTestEnvironment;
> }
> else if (confirm('Use staging?')) {
> 	packageName	= 'staging.cyph.app';
> }
> else if (confirm('Use beta-staging?')) {
> 	packageName	= 'beta-staging.cyph.app';
> }
> else if (confirm('Use master?')) {
> 	packageName	= 'master.cyph.app';
> }
> else {
> 	try {
> 		packageName	= (prompt('Other:') || '').trim();
> 	}
> 	catch (_) {
> 		alert('Too bad. Using master anyway.');
> 		packageName	= 'master.cyph.app';
66a94,109
> (alternateTestEnvironment ?
> 
> 
> fetch(alternateTestEnvironmentOrigin).then(function (response) {
> 	return response.text();
> }).then(function (s) {
> 	return {package: s.replace(
> 		'<base href="/"',
> 		'<base href="' + alternateTestEnvironmentOrigin + '/"'
> 	)};
> }).catch(function (err) {
> 	alert(err.toString());
> 	throw err;
> }) :
> 
> 
183c226,229
< }).
---
> })
> 
> 
> ).
187a234
> 	var bodyHTML	= o.package.split('<body>')[1].split('</body>')[0];
193,194c240,250
< 	document.head.innerHTML	= headHTML;
< 	document.body.innerHTML	= o.package.split('<body>')[1].split('</body>')[0];
---
> 	if (!alternateTestEnvironment) {
> 		document.head.innerHTML	= headHTML;
> 		document.body.innerHTML	= bodyHTML;
> 
> 		return webSignSRI(o.packageMetadata).catch(function (err) {
> 			document.head.innerHTML		= '';
> 			document.body.textContent	= err;
> 		});
> 	}
> 
> 	var scriptRegex		= /<script[\s$>].*?<\/script>/g;
196,199c252,326
< 	webSignSRI(o.packageMetadata).catch(function (err) {
< 		document.head.innerHTML		= '';
< 		document.body.textContent	= err;
< 	});
---
> 	var scriptsPromise	= Promise.all(
> 		(o.package.match(scriptRegex) || []).map(function (s) {
> 			return fetch(
> 				alternateTestEnvironmentOrigin +
> 				'/' +
> 				(s.split('src="')[1] + '').split('"')[0].replace(/^\//, '')
> 			).then(function (o) {
> 				return o.text();
> 			});
> 		})
> 	);
> 
> 	var stylesheetRegex		= /<link rel="stylesheet".*?>/g;
> 
> 	var stylesheetsPromise	= Promise.all(
> 		(o.package.match(stylesheetRegex) || []).map(function (s) {
> 			return fetch(
> 				alternateTestEnvironmentOrigin +
> 				'/' +
> 				(s.split('href="')[1] + '').split('"')[0].replace(/^\//, '')
> 			).then(function (o) {
> 				return o.text();
> 			});
> 		})
> 	);
> 
> 	headHTML	= headHTML
> 		.replace(scriptRegex, '')
> 		.replace(stylesheetRegex, '')
> 		.replace(/<base href=.*?>/, '');
> 
> 	bodyHTML	= bodyHTML
> 		.replace(scriptRegex, '')
> 		.replace(stylesheetRegex, '');
> 
> 	document.head.innerHTML	+= headHTML;
> 	document.body.innerHTML	+= bodyHTML;
> 
> 	document.getElementById('websign-load').remove();
> 	document.querySelector('link[href="css/websign.css"]').remove();
> 
> 	self.locationData	= {
> 		hash: '',
> 		host: alternateTestEnvironment + ':42002',
> 		hostname: alternateTestEnvironment,
> 		href: alternateTestEnvironmentOrigin + '/',
> 		origin: alternateTestEnvironmentOrigin,
> 		pathname: '/',
> 		port: '42002',
> 		protocol: 'http:',
> 		search: ''
> 	};
> 
> 	return Promise.all([
> 		scriptsPromise.then(function (scripts) {
> 			scripts.forEach(function (script) {
> 				var elem		= document.createElement('script');
> 				elem.innerHTML	= script.replace(
> 					/\/assets\//g,
> 					alternateTestEnvironmentOrigin + '/assets/'
> 				);
> 				document.body.appendChild(elem);
> 			});
> 		}),
> 		stylesheetsPromise.then(function (stylesheets) {
> 			stylesheets.forEach(function (stylesheet) {
> 				var elem		= document.createElement('style');
> 				elem.innerHTML	= stylesheet.replace(
> 					/\/assets\//g,
> 					alternateTestEnvironmentOrigin + '/assets/'
> 				);
> 				document.body.appendChild(elem);
> 			});
> 		})
> 	]);
