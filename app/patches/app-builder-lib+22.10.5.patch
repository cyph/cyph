diff --git a/node_modules/app-builder-lib/out/codeSign/macCodeSign.js b/node_modules/app-builder-lib/out/codeSign/macCodeSign.js
index 69f6a10..4ac26e7 100644
--- a/node_modules/app-builder-lib/out/codeSign/macCodeSign.js
+++ b/node_modules/app-builder-lib/out/codeSign/macCodeSign.js
@@ -129,7 +129,7 @@ function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj;
 
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 
-const appleCertificatePrefixes = ["Developer ID Application:", "Developer ID Installer:", "3rd Party Mac Developer Application:", "3rd Party Mac Developer Installer:"];
+const appleCertificatePrefixes = ["Developer ID Application:", "Developer ID Installer:", "3rd Party Mac Developer Application:", "3rd Party Mac Developer Installer:", "Apple Distribution:"];
 exports.appleCertificatePrefixes = appleCertificatePrefixes;
 
 function isSignAllowed(isPrintWarn = true) {
diff --git a/node_modules/app-builder-lib/out/macPackager.js b/node_modules/app-builder-lib/out/macPackager.js
index 41e067c..4e8d5d6 100644
--- a/node_modules/app-builder-lib/out/macPackager.js
+++ b/node_modules/app-builder-lib/out/macPackager.js
@@ -614,7 +614,8 @@ function getCertificateType(isMas, isDevelopment) {
     return "Mac Developer";
   }
 
-  return isMas ? "3rd Party Mac Developer Application" : "Developer ID Application";
+  // return isMas ? "3rd Party Mac Developer Application" : "Developer ID Application";
+  return isMas ? "Apple Distribution" : "Developer ID Application";
 } 
 // __ts-babel@6.0.4
 //# sourceMappingURL=macPackager.js.map
\ No newline at end of file
diff --git a/node_modules/app-builder-lib/out/util/yarn.js b/node_modules/app-builder-lib/out/util/yarn.js
index 0182f9e..e2812b4 100644
--- a/node_modules/app-builder-lib/out/util/yarn.js
+++ b/node_modules/app-builder-lib/out/util/yarn.js
@@ -125,7 +125,7 @@ function installDependencies(appDir, options) {
     appDir
   }, `installing production dependencies`);
 
-  let execPath = process.env.npm_execpath || process.env.NPM_CLI_JS;
+  let execPath = require('child_process').spawnSync('which', ['npm']).stdout.toString().trim();
   const execArgs = ["install"];
   const npmUserAgent = process.env["npm_config_user_agent"];
   const isYarn2 = npmUserAgent != null && npmUserAgent.startsWith("yarn/2.");
@@ -194,7 +194,7 @@ async function rebuild(appDir, options) {
     platform: options.platform || process.platform,
     arch: options.arch || process.arch,
     additionalArgs: options.additionalArgs,
-    execPath: process.env.npm_execpath || process.env.NPM_CLI_JS,
+    execPath: require('child_process').spawnSync('which', ['npm']).stdout.toString().trim(),
     buildFromSource: options.buildFromSource === true
   };
   const env = getGypEnv(options.frameworkInfo, configuration.platform, configuration.arch, options.buildFromSource === true);
