syntax = "proto3";


/** Account contact relationship metadata. */
message AccountContactState {
	/** Possible states. */
	enum States {
		None = 0;
		Confirmed = 1;
		IncomingRequest = 2;
		OutgoingRequest = 3;
	}

	/** Optional email. */
	string email = 2;

	/** Indicates whether this contact is (or requesting to be) in the Inner Circle. */
	bool innerCircle = 4;

	/** Optional name. */
	string name = 3;

	/** @see States */
	required States state = 1;
}

/** File directories. */
message AccountFileDirectory {
	/** Children of this directory. */
	map<string, AccountFileDirectory> children = 1;
}

/** Metadata of one file stored in an account. */
message AccountFileRecord {
	/** Possible file record types. */
	enum RecordTypes {
		Appointment = 0;
		Doc = 2;
		EhrApiKey = 5;
		Email = 11;
		File = 1;
		Form = 3;
		MessagingGroup = 8;
		Note = 4;
		Password = 9;
		PGPKey = 10;
		RedoxPatient = 6;
		Wallet = 7;
	}

	/** File ID. */
	required string id = 1;

	/** File MIME type. */
	required string mediaType = 2;

	/** File name. */
	required string name = 3;

	/** Path of parent directory. */
	string parentPath = 10;

	/** Type of file record. */
	required RecordTypes recordType = 4;

	/** Reply-to email address (typically for anonymous shares). */
	string replyToEmail = 8;

	/** Reply-to name (typically for anonymous shares). */
	string replyToName = 9;

	/** Size in bytes. */
	required double size = 5;

	/** Timestamp of upload or last save. */
	required double timestamp = 6;

	/** Indicates whether this file was originally an anonymous share. */
	bool wasAnonymousShare = 7;
}

/** Shareable reference to a file record. */
message AccountFileReference {
	/** File record ID. */
	required string id = 1;

	/** Symmetric key used for encrypting file. */
	required bytes key = 2;

	/** Miscellaneous metadata about this file, specific to the current user. */
	string metadata = 4;

	/** Username of owner. */
	required string owner = 3;
}

/** Contains a file reference. */
message AccountFileReferenceContainer {
	/** Anonymously shared file data. */
	message AnonymousShare {
		/** @see AccountFileRecord */
		required AccountFileRecord accountFileRecord = 1;

		/** @see AccountFileReference.key */
		required bytes key = 2;
	}

	/** Signed file data. */
	message SignedShare {
		/** @see AccountFileReference */
		required bytes accountFileReference = 1;

		/** @see AccountFileReference.owner */
		required string owner = 2;
	}

	/** Value. */
	oneof value {
		AnonymousShare anonymousShare = 1;
		SignedShare signedShare = 2;
	}
}

/** Augmented PAKE login data. */
message AccountLoginData {
	/** Previous secondary password. */
	string oldSecondaryPassword = 3;

	/** Randomly generated password for database authentication. */
	required string secondaryPassword = 1;

	/** Symmetric key for encrypting user data. */
	required bytes symmetricKey = 2;
}

/** Group chat metadata. */
message AccountMessagingGroup {
	/** Castle session ID. */
	required string castleSessionID = 1;

	/** Description. */
	string description = 2;

	/** Indicates whether the mail UI should be used by default. */
	bool mailUIDefault = 3;

	/** Title. */
	string title = 4;

	/** Participants. */
	repeated string usernames = 5;
}

/** Account notification. */
message AccountNotification {
	/** Notification action data. */
	message AccountNotificationAction {
		/** Callback function name. */
		string callback = 1;

		/** Icon name. */
		string icon = 2;

		/** Whether or not the action was intended to open the app in the foreground. */
		bool foreground = 3;

		/** Human-readable action title. */
		string title = 4;
	}

	/** List of associated actions. */
	repeated AccountNotificationAction actions = 1;

	/** Call metadata, if applicable. */
	string callMetadata = 2;

	/** ID of event associated with notification. */
	string eventID = 3;

	/** @see AccountFileRecord.RecordTypes */
	AccountFileRecord.RecordTypes fileType = 4;

	/** Indicates whether or not the notification is read. */
	required bool isRead = 5;

	/** ID of messaging session, if applicable. */
	string messagesID = 11;

	/** Notification text. */
	required string text = 6;

	/** Longer-form notification text. */
	required string textDetail = 7;

	/** Timestamp. */
	required double timestamp = 8;

	/** @see NotificationTypes */
	required NotificationTypes type = 9;

	/** Sender username, if applicable. */
	string username = 10;
}

/** Social networking post. */
message AccountPost {
	/** Indicates post circle (public if unspecified). */
	string circleID = 1;

	/** Markdown post content. */
	required string content = 2;

	/** Indicates whether post is deleted. */
	bool deleted = 3;

	/** Post ID. */
	string id = 4;

	/** Image. */
	bytes image = 5;

	/** Timestamp of last edit (if applicable). */
	double lastEditTimestamp = 6;

	/** Reference to reposted post. */
	AccountPostReference repost = 8;

	/** Timestamp. */
	required double timestamp = 7;
}

/** Symmetric key and related metadata for accessing a group of private posts. */
message AccountPostCircle {
	/** Special types of circles with particular significance. */
	enum AccountPostCircleTypes {
		Standard = 0;
		InnerCircle = 1;
		OnlyMe = 2;
	}

	/** Indicates whether this circle is still in use. */
	required bool active = 1;

	/** @see AccountPostCircleTypes */
	required AccountPostCircleTypes circleType = 2;

	/** ID of list to fetch posts. */
	required string id = 3;

	/** Human-readable name of circle. */
	required string name = 4;

	/** Symmetric key for encrypting posts. */
	required bytes key = 5;

	/** If applicable, ID of previous circle (changes when someone's access is revoked). */
	string predecessorID = 6;
}

/** Social networking comment. */
message AccountPostComment {
	/** Comment author's username. */
	string author = 1;

	/** Markdown comment content. */
	required string content = 2;

	/** Indicates whether comment is deleted. */
	bool deleted = 3;

	/** Comment ID. */
	string id = 4;

	/** Timestamp of last edit (if applicable). */
	double lastEditTimestamp = 5;

	/** ID of parent post. */
	required string postID = 6;

	/** Timestamp. */
	required double timestamp = 7;
}

/** Reference to a social networking comment. */
message AccountPostCommentReference {
	/** @see AccountPostComment.author */
	required string author = 1;

	/** @see AccountPostComment.id */
	required string id = 2;
}

/** Reference to a social networking post. */
message AccountPostReference {
	/** Post author's username. */
	required string author = 1;

	/** Post ID. */
	required string id = 2;
}

/** Metadata captured during registration. */
message AccountRegistrationMetadata {
	/** Metadata from email compose attempt. */
	message InitialEmailCompose {
		/** Draft ID. */
		string draftID = 1;

		/** @see EmailMessage.from */
		EmailMessage.Contact from = 2;

		/** Indicates whether this draft is still pending. */
		bool pending = 3;

		/** Redirect URL. */
		string redirectURL = 4;
	}

	/** @see InitialEmailCompose */
	InitialEmailCompose initialEmailCompose = 1;

	/** Route that user was redirected to /register from, if applicable. */
	repeated string initialRoute = 2;
}

/** Completion state of recommended tasks for new accounts. */
message AccountSetupChecklist {
	/** Adding contacts. */
	bool addContact = 1;

	/** Files. */
	bool files = 2;

	/** Inviting friends. */
	bool inviteFriend = 3;

	/** Meetings. */
	bool meetings = 4;

	/** Product tour. */
	bool productTour = 5;

	/** Social. */
	bool social = 6;
}

/** User presence. */
message AccountUserPresence {
	/** Possible presence statuses. */
	enum Statuses {
		Offline = 0;
		Away = 1;
		Busy = 2;
		Online = 3;
	}

	/** Current presence status. */
	required Statuses status = 1;
}

/** User public profile. */
message AccountUserProfile {
	/** Description. */
	required string description = 1;

	/** Usernames and similar identifiers for external services like social media. */
	map<string, string> externalUsernames = 2;

	/** Full name. */
	required string name = 4;

	/** Username (capitalized according to user preference). */
	required string realUsername = 5;

	/** @see AccountUserTypes */
	required AccountUserTypes userType = 6;
}

/** User public profile additional data. */
message AccountUserProfileExtra {
	/** Language skill. */
	message Language {
		/** Language name. */
		string language = 1;

		/** @see Proficiency */
		Proficiency proficiency = 2;
	}

	/** PGP data. */
	message PGP {
		/** Keybase username. */
		string keybaseUsername = 1;

		/** Public key. */
		bytes publicKey = 2;

		/** A signed PGPVerification object. */
		bytes publicKeyVerification = 3;
	}

	/** Any sort of vocational or educational position. */
	message Position {
		/** Extra information (e.g. position title or degree subject). */
		string detail = 1;

		/** End date timestamp. */
		double endDate = 2;

		/* Name of location/institution (e.g. SpaceX). */
		string locationName = 3;

		/* URL of location/institution (e.g. spacex.com). */
		string locationURL = 4;

		/** Start date timestamp. */
		double startDate = 5;
	}

	/** Level of proficiency in a skill. */
	enum Proficiency {
		Basic = 0;
		Intermediate = 1;
		Fluent = 2;
		Native = 3;
	}

	/** Physical address. */
	string address = 1;

	/** Educational history. */
	repeated Position education = 2;

	/** Forms. */
	repeated Form forms = 10;

	/** Gender. */
	string gender = 3;

	/** Insurance. */
	repeated string insurance = 4;

	/** Languages. */
	repeated Language languages = 5;

	/** NPI numbers. */
	repeated string npis = 6;

	/** Username of parent organization. */
	string organization = 7;

	/** @see PGP */
	PGP pgp = 11;

	/** Specialties. */
	repeated string specialties = 8;

	/** Work history. */
	repeated Position work = 9;
}

/** AGSE-PKI certificate. */
message AccountUserPublicKeys {
	/** Potassium.Box public key. */
	required bytes encryption = 1;

	/** Potassium.Sign public key. */
	required bytes signing = 2;
}

/** Account types for different Cyph-based applications. */
enum AccountUserTypes {
	Standard = 0;
	Org = 1;
	TelehealthAdmin = 2;
	TelehealthDoctor = 3;
}

/** AGSE-PKI certificate. */
message AGSEPKICert {
	/** @see AccountUserPublicKeys.signing */
	required AGSEPKICSR agsePKICSR = 1;

	/** Timestamp of certificate issuance. */
	required double timestamp = 2;
}

/** AGSE-PKI certificate signing request. */
message AGSEPKICSR {
	/** @see AccountUserPublicKeys.signing */
	required bytes publicSigningKey = 1;

	/** Username. */
	required string username = 2;
}

/** AGSE-PKI history of previous issuances. */
message AGSEPKIIssuanceHistory {
	/** Public key hashes. */
	map<string, bool> publicSigningKeyHashes = 1;

	/** Timestamp. */
	required double timestamp = 2;

	/** Usernames. */
	map<string, bool> usernames = 3;
}

/** Appointment. */
message Appointment {
	/** RSVP statuses. */
	enum RSVP {
		Maybe = 0;
		No = 1;
		Yes = 2;
	}

	/**
	 * EHR data for the appointment.
	 * TODO: Reconcile with Redox types.
	 */
	message EHR {
		/**
		 * An ID that can span several visits often related to the same issue -
		 * pregnancy, surgeries, research study, etc.
		 */
		string accountNumber = 1;

		/** ID of the attending provider. This ID is required for Inpatient Visits. */
		string attendingProviderID = 2;

		/** ID type of the ID for the attending provider. */
		string attendingProviderIDType = 3;

		/** Full name of the attending provider. */
		string attendingProviderName = 4;

		/**
		 * Patient balance due for this visit. This field depends on whether or not the sending
		 * system has billing functionality, and whether they calculate this field.
		 */
		double balance = 5;

		/** Duration of the visit in minutes. */
		double duration = 6;

		/** Location of the visit. */
		string location = 7;

		/**
		 * Type of location.
		 * Examples: Clinic, Department, Home, Nursing Unit, Provider's Office, Phone.
		 */
		string locationType = 8;

		/** Facility. Example: Community Hospital. */
		string locationFacility = 9;

		/**
		 * Patient class is used in many EHRs to determine where to put the patient.
		 * Examples: Inpatient, Outpatient, Emergency. (Redox required for Visit).
		 */
		string patientClass = 10;

		/** Reason for the visit. */
		string reason = 11;

		/** Datetime of visit or the arrival time of the admission. (ISO 8601) */
		double visitDateTime = 12;

		/** Unique ID of a single visit. */
		string visitNumber = 13;
	}

	/** Indicates whether data can be shared with each recipient of a meeting invite. */
	message Sharing {
		/** Whether to share the current user's time zone. */
		bool inviterTimeZone = 1;

		/** Whether to share the list of recipients. */
		bool memberContactInfo = 2;

		/** Whether to share contact information for other recipients. */
		bool memberList = 3;
	}

	/** @see CalendarInvite */
	required CalendarInvite calendarInvite = 1;

	/** EHR-specific data related to the appointment. */
	EHR data = 2;

	/** Relevant forms. */
	repeated Form forms = 3;

	/** Unregistered sender email address. */
	string fromEmail = 8;

	/** Unregistered sender email name. */
	string fromName = 9;

	/** Notes taken during the appointment. */
	string notes = 4;

	/** Confirmation that the appointment occurred. */
	bool occurred = 5;

	/** Participant usernames. */
	repeated string participants = 6;

	/** Sub-session ID where RSVP statuses are posted. */
	required string rsvpSessionSubID = 7;

	/** @see Sharing */
	Sharing sharing = 10;
}

/** Burner group initialization data. */
message BurnerGroup {
	/** @see BurnerGroupMember */
	repeated BurnerGroupMember members = 1;
}

/** Burner group member. */
message BurnerGroupMember {
	/** ID. */
	required string id = 1;

	/** Indicates whether this is the group host. */
	bool isHost = 2;

	/** Name. */
	string name = 3;
}

/** Burner group member init data. */
message BurnerGroupMemberInitiator {
	/** Email address. */
	string email = 3;

	/** ID. */
	string id = 1;

	/** Name. */
	string name = 2;

	/** Phone number. */
	string phoneNumber = 4;

	/** Cyph username. */
	string username = 5;
}

/** Burner session init data. */
message BurnerSession {
	/** @see CallTypes */
	CallTypes callType = 1;

	/** @see BurnerGroupMemberInitiator */
	repeated BurnerGroupMemberInitiator members = 2;

	/** Encoded UTC hour and minute of meeting, used in session handshake. */
	string timeString = 3;
}

/** Calendar invite. */
message CalendarInvite {
	/** Days of the week for appointments. */
	enum DaysOfWeek {
		Sunday = 0;
		Monday = 1;
		Tuesday = 2;
		Wednesday = 3;
		Thursday = 4;
		Friday = 5;
		Saturday = 6;
	}

	/** Time periods of the day for appointments. */
	enum TimeFrames {
		Morning = 0;
		Afternoon = 1;
		Evening = 2;
	}

	/** Preferred days for counteroffers. */
	map<uint32, bool> alternateDays = 1;

	/** Preferred time frames days for counteroffers. */
	map<uint32, bool> alternateTimeFrames = 2;

	/** Burner-specific UID. */
	string burnerUID = 11;

	/** @see CallTypes */
	required CallTypes callType = 3;

	/** Event description. */
	required string description = 4;

	/** End timestamp. */
	required double endTime = 5;

	/** @see CalendarRecurrenceRules */
	CalendarRecurrenceRules recurrence = 10;

	/** Start timestamp. */
	required double startTime = 6;

	/** Event title/subject. */
	required string title = 7;

	/** Event UID. */
	string uid = 9;

	/** Meeting URL. */
	string url = 8;
}

/** Calendar invite recurrence rules. */
message CalendarRecurrenceRules {
	/** Recurrence frequency values. */
	enum Frequency {
		Yearly = 0;
		Monthly = 1;
		Weekly = 2;
		Daily = 3;
		Hourly = 4;
		Minutely = 5;
		Secondly = 6;
	}

	/** RFC 5545 BYMONTH. */
	repeated uint32 byMonth = 1;

	/** RFC 5545 BYMONTHDAY. */
	repeated uint32 byMonthDay = 2;

	/** RFC 5545 BYSETPOS. */
	repeated uint32 bySetPosition = 3;

	/** RFC 5545 BYDAY. */
	repeated CalendarInvite.DaysOfWeek byWeekDay = 4;

	/** RFC 5545 COUNT. */
	uint32 count = 5;

	/** RFC 5545 EXDATE. */
	repeated double excludeDates = 6;

	/** RFC 5545 EXDATE time zone. */
	string excludeDatesTimeZone = 7;

	/** RFC 5545 FREQ. */
	required Frequency frequency = 8;

	/** RFC 5545 INTERVAL. */
	uint32 interval = 9;

	/** RFC 5545 UNTIL. */
	double until = 10;

	/** RFC 5545 WKST. */
	CalendarInvite.DaysOfWeek weekStart = 11;
}

/** Call types. */
enum CallTypes {
	None = 0;
	Audio = 1;
	Video = 2;
}

/** Represents queued up incoming Castle cyphertext messages. */
message CastleIncomingMessages {
	/** List of received cyphertexts with a particular message ID. */
	message CastleIncomingMessageItem {
		/** @see CastleIncomingMessageItem */
		repeated bytes cyphertexts = 1;
	}

	/** Max observed incoming message ID. */
	required uint32 max = 1;

	/** Mapping of message IDs to CastleIncomingMessageItems. */
	map<uint32, CastleIncomingMessageItem> queue = 2;
}

/** State of a Castle Core ratchet. */
message CastleRatchetState {
	/** Asymmetric (future-secret) ratchet state. */
	message AsymmetricRatchetState {
		/** Local user's Potassium.EphemeralKeyExchange private key. */
		required bytes privateKey = 1;

		/** Remote user's Potassium.EphemeralKeyExchange public key. */
		required bytes publicKey = 2;
	}

	/** Symmetric (forward-secret) ratchet state. */
	message SymmetricRatchetState {
		/** Pair of Potassium.SecretBox keys for encrypting and decrypting messages. */
		message SymmetricKeyPair {
			/** Key for incoming messages. */
			required bytes incoming = 1;

			/** Key for outgoing messages. */
			required bytes outgoing = 2;
		}

		/** Current active SymmetricKeyPair. */
		required SymmetricKeyPair current = 1;

		/** SymmetricKeyPair queued up to replace current. */
		required SymmetricKeyPair next = 2;
	}

	/** @see AsymmetricRatchetState */
	required AsymmetricRatchetState asymmetric = 1;

	/** Last incoming message ID. */
	required uint32 incomingMessageID = 2;

	/** Next outgoing message ID. */
	required uint32 outgoingMessageID = 3;

	/** @see SymmetricRatchetState */
	required SymmetricRatchetState symmetric = 4;
}

/** CastleRatchetState update with assocated output. */
message CastleRatchetUpdate {
	/** Encrypted outgoing cyphertext. */
	bytes cyphertext = 1;

	/** Decrypted incoming plaintext. */
	bytes plaintext = 2;

	/** @see CastleRatchetState */
	required CastleRatchetState ratchetState = 3;
}

/** ChannelService message. */
message ChannelMessage {
	/** Cyphertext. */
	required bytes cyphertext = 1;

	/** User who sent the message. */
	required string author = 2;
}

/** Chat last confirmed message. */
message ChatLastConfirmedMessage {
	/** Message ID. */
	required string id = 1;

	/** Message index. */
	required uint32 index = 2;
}

/** Represents one message in a chat. */
message ChatMessage {
	/** Author types. */
	enum AuthorTypes {
		App = 0;
		Local = 1;
		Remote = 2;
	}

	/** Author user ID. */
	string authorID = 1;

	/** @see AuthorTypes */
	required AuthorTypes authorType = 2;

	/**
	 * Hash of this entire object.
	 * Includes value. Excludes authorType, hash, and key.
	 */
	bytes hash = 9;

	/** @see SessionMessageData.id */
	required string id = 4;

	/** Key to decrypt an externally contained message value. */
	bytes key = 10;

	/** If specified, this message will be ignored until the described predecessors are found. */
	repeated ChatMessagePredecessor predecessors = 12;

	/** @see SessionText.selfDestructTimeout */
	uint32 selfDestructTimeout = 5;

	/** @see SessionMessageData.sessionSubID */
	string sessionSubID = 6;

	/** @see SessionMessageData.timestamp */
	required double timestamp = 7;

	/** @see ChatMessageValue */
	ChatMessageValue value = 8;
}

/** Array of chat messages. */
message ChatMessageList {
	/** Messages. */
	repeated ChatMessage messages = 1;
}

/** @see IChatMessageLiveValue */
message ChatMessageLiveValueSerialized {
	/** @see ChatMessageValue.calendarInvite */
	CalendarInvite calendarInvite = 1;

	/** @see ChatMessageValue.fileTransfer */
	FileTransfer fileTransfer = 2;

	/** @see ChatMessageValue.form */
	Form form = 3;

	/** @see ChatMessageValue.quill */
	bytes quill = 4;

	/** @see ChatMessageValue.text */
	string text = 5;
}

/** Description of a predecessor message. */
message ChatMessagePredecessor {
	/** @see ChatMessage.hash */
	required bytes hash = 1;

	/** @see ChatMessage.id */
	required string id = 2;
}

/** Possible values of a chat text message. */
message ChatMessageValue {
	/** Possible types of a chat text message value. */
	enum Types {
		CalendarInvite = 0;
		FileTransfer = 5;
		Form = 1;
		Quill = 2;
		RSVP = 3;
		Text = 4;
	}

	/** Value. */
	oneof value {
		CalendarInvite calendarInvite = 1;
		FileTransfer fileTransfer = 6;
		Form form = 2;
		bytes quill = 3;
		Appointment.RSVP rsvp = 4;
		string text = 5;
	}
}

/** Pending message data. */
message ChatPendingMessage {
	/** @see ChatMessageLiveValueSerialized */
	required ChatMessageLiveValueSerialized message = 1;

	/** @see ChatMessageValue.Types */
	required ChatMessageValue.Types messageType = 2;

	/** @see SessionText.selfDestructChat */
	required bool selfDestructChat = 3;

	/** @see ChatMessage.selfDestructTimeout */
	uint32 selfDestructTimeout = 4;
}

/** A combined signature. */
message CombinedSignature {
	/** Indicates whether `message` is compressed. */
	bool compressed = 1;

	/** Plaintext message. */
	required bytes message = 2;

	/** Signature. */
	required bytes signature = 3;
}

/** Cryptocurrencies. */
enum Cryptocurrencies {
	BTC = 0;
	BCH = 1;
	CYPH = 2;
	DASH = 3;
	DOGE = 4;
	ETH = 5;
	FIL = 6;
	LTC = 7;
	NEO = 8;
	XLM = 9;
	XMR = 10;
	XRB = 11;
	XRP = 12;
	WTC = 13;
	ZEC = 14;
}

/** Government-backed currencies. */
enum Currencies {
	USD = 0;
	AUD = 1;
	BRL = 2;
	CAD = 3;
	CHF = 4;
	CLP = 5;
	CNY = 6;
	DKK = 7;
	EUR = 8;
	GBP = 9;
	HKD = 10;
	INR = 11;
	ISK = 12;
	JPY = 13;
	KRW = 14;
	NZD = 15;
	PLN = 16;
	RUB = 17;
	SEK = 18;
	SGD = 19;
	THB = 20;
	TWD = 21;
}

/** A Cyph plan. */
message CyphPlan {
	/** @see CyphPlans */
	required CyphPlans plan = 1;
}

/** Cyph plans. */
enum CyphPlans {
	Free = 0;
	AnnualBusiness = 12;
	AnnualPlatinum = 8;
	AnnualPremium = 2;
	AnnualSupporter = 10;
	AnnualTelehealth = 5;
	FoundersAndFriends = 4;
	FoundersAndFriends_Telehealth = 13;
	LifetimePlatinum = 3;
	MonthlyBusiness = 11;
	MonthlyPlatinum = 7;
	MonthlyPremium = 1;
	MonthlySupporter = 9;
	MonthlyTelehealth = 6;
}

/** Cyph plan types. */
enum CyphPlanTypes {
	Free = 0;
	Business = 6;
	FoundersAndFriends = 1;
	Platinum = 2;
	Premium = 3;
	Supporter = 4;
	Telehealth = 5;
}

/** Database item metadata. */
message DatabaseItem {
	/** Item base64 data. */
	string data = 1;

	/** Item hash. */
	required string hash = 2;

	/** Timestamp. */
	required double timestamp = 3;
}

/** An EHR integration API key. */
message EhrApiKey {
	/** API key. */
	required string apiKey = 1;

	/** Indicates whether this is a master API key. */
	required bool isMaster = 2;
}

/** Data for auto-publishing email address. */
message EmailAutoPublish {
	/** Email address. */
	required string email = 1;

	/** Signature. */
	required bytes signature = 2;
}

/** Email message data. */
message EmailMessage {
	/** Email contact data for a user. */
	message Contact {
		/** Email address. */
		required string email = 1;

		/** Name. */
		required string name = 2;

		/** Username. */
		string username = 3;

		/** Indicates whether details have been verified. */
		bool verified = 4;
	}

	/** Attachments. */
	repeated FileContainer attachments = 1;

	/** BCC email contacts. */
	repeated Contact bcc = 2;

	/** Sfdt-formatted message content. */
	string body = 3;

	/** CC email contacts. */
	repeated Contact cc = 4;

	/** Sender email contact. */
	required Contact from = 5;

	/** Subject. */
	string subject = 6;

	/** Timestamp. */
	required double timestamp = 7;

	/** Recipient email contacts. */
	repeated Contact to = 8;
}

/** Email message data for external systems. */
message EmailMessageExternal {
	/** @see EmailMessage.attachments */
	repeated FileContainer attachments = 1;

	/** @see EmailMessage.bcc */
	repeated EmailMessage.Contact bcc = 2;

	/** @see EmailMessage.cc */
	repeated EmailMessage.Contact cc = 3;

	/** @see EmailMessage.from */
	EmailMessage.Contact from = 4;

	/** HTML body. */
	string html = 5;

	/** @see EmailMessage.subject */
	string subject = 6;

	/** Text body. */
	string text = 7;

	/** @see EmailMessage.to */
	repeated EmailMessage.Contact to = 8;
}

/** Angular CLI environment configuration. */
message Environment {
	/** Custom build environment data. */
	message CustomBuild {
		/** Voice call background image for this custom build. */
		bytes audioImage = 1;

		/** @see CustomBuildConfig */
		required CustomBuildConfig config = 2;

		/** Custom styling. */
		string css = 3;

		/** Walken image replacement for this custom build. */
		bytes errorImage = 4;

		/** Favicon for this custom build. */
		bytes favicon = 5;

		/** Identifier of this custom build. */
		required string id = 6;

		/** Horizontal logo for this custom build. */
		bytes logoHorizontal = 7;

		/** Vertical logo for this custom build. */
		bytes logoVertical = 8;

		/** Environment namespace, the base ID without branch/version information. */
		required string namespace = 9;

		/** Replacement strings for this custom build. */
		map<string, string> strings = 10;
	}

	/** Custom build configuration. */
	message CustomBuildConfig {
		/** Optional custom background color. */
		string backgroundColor = 1;

		/** Indicates whether this is for a browser extension. */
		bool browserExtension = 2;

		/** Indicates whether environment should be accounts-only (no ephemeral). */
		bool burnerOnly = 3;

		/** If true, performs audio call by default. */
		bool callTypeAudio = 4;

		/** If true, performs video call by default (takes priority over callTypeAudio). */
		bool callTypeVideo = 5;

		/** If true, is dark theme. */
		bool dark = 6;

		/** If true, forces the use of Twilio TURN infrastructure for lower-latency calls. */
		bool disableP2P = 7;

		/** Indicates whether docs will be enabled. */
		bool enableDocs = 8;

		/** Indicates whether wallets will be enabled. */
		bool enableWallets = 9;

		/** Optional custom foreground color. */
		string foregroundColor = 10;

		/** If true, locked down with server-stored password. */
		bool lockedDown = 11;

		/** Indicates whether native crypto will be used. */
		bool nativeCrypto = 12;

		/** Organization username to associate with this custom build. */
		string organization = 13;

		/** Optional password to lock down environment (not a security feature). */
		string password = 14;

		/** Indicates whether this is a Cyph Pro environment. */
		bool pro = 15;

		/** Indicates whether this is the telehealth version. */
		bool telehealth = 16;

		/** Indicates whether this is the full telehealth version. */
		bool telehealthFull = 17;

		/** Enables just the telehealth theme (no change in functionality). */
		bool telehealthTheme = 18;

		/** Page title of this Cyph instance. */
		string title = 19;

		/** Sets the value of `PotassiumEncoding.useCryptographicAgilityTag`. */
		bool useCryptographicAgilityTag = 20;

		/** Indicates whether this environment should share a specific database namespace. */
		string useNamespace = 21;

		/** If true, environment will be full white label, with no "Powered by Cyph" notices. */
		bool whiteLabel = 22;
	}

	/** Firebase configuration. */
	message Firebase {
		/** API key. */
		required string apiKey = 1;

		/** App ID. */
		required string appId = 2;

		/** Firebase Cloud Messaging ID. */
		required string messagingSenderId = 3;

		/** Project ID. */
		required string project = 4;
	}

	/**
	 * Exists if in a custom build environment.
	 * @see CustomBuild
	 */
	CustomBuild customBuild = 1;

	/** Debug mode. */
	bool debug = 2;

	/** Name of this environment. */
	required string envName = 3;

	/** @see Firebase */
	required Firebase firebase = 4;

	/** Indicates whether this is local development environment. */
	required bool local = 5;

	/** Indicates whether this is prod. */
	required bool production = 6;

	/** Indicates whether this is an automated test. */
	bool test = 7;

	/** Indicates whether production AGSE-PKI signing keys should be used. */
	bool useProdSigningKeys = 8;
}

/** File data container. */
message FileContainer {
	/** File data. */
	required bytes data = 1;

	/** File MIME type. */
	required string mediaType = 2;

	/** File name. */
	required string name = 3;
}

/** Represents a transferred file. */
message FileTransfer {
	/** Plaintext hash. */
	bytes hash = 1;

	/** Unique ID to represent this file transfer. */
	required string id = 2;

	/** Indicates whether file is being sent from this Cyph instance. */
	bool isOutgoing = 4;

	/** Symmetric key used for encrypting file over the wire. */
	bytes key = 5;

	/** Indicates whether file should be handled as multimedia. */
	required bool media = 3;

	/** MIME type. */
	required string mediaType = 6;

	/** File name. */
	required string name = 7;

	/** File size in bytes. */
	required uint32 size = 8;
}

/** Represents a form that a user can submit responses to. */
message Form {
	/** Reusable building block consisting of multiple forms. */
	message Component {
		/** @see ElementContainer */
		repeated ElementContainer containers = 1;

		/** @see Form.id */
		string id = 2;

		/** Indicates whether this is a column or a row. */
		bool isColumn = 4;
	}

	/** One element of a Form, and one column of an ElementRow. */
	message Element {
		/** Element input types. */
		enum Types {
			Text = 0;
			Checkbox = 1;
			CyphUsername = 15;
			Datepicker = 2;
			Email = 3;
			File = 14;
			Input = 4;
			Number = 5;
			Password = 6;
			Radio = 7;
			Select = 8;
			Slider = 9;
			SlideToggle = 10;
			Textarea = 11;
			Time = 12;
			URL = 13;
		}

		/** File name. */
		string fileName = 16;

		/** @see Form.id */
		string id = 1;

		/** Title/label. */
		string label = 2;

		/** Input mask (serialized with MessagePack). */
		bytes mask = 3;

		/** Maximum numerical value. */
		double max = 4;

		/** File MIME type. */
		string mediaType = 17;

		/** Minimum numerical value. */
		double min = 5;

		/** Flex nogrow. */
		bool noGrow = 6;

		/** Options to use if type Radio or Select. */
		repeated string options = 7;

		/** Indicates whether required. */
		bool required = 8;

		/** Numerical value minimum increment. */
		double step = 14;

		/** Tooltip. */
		string tooltip = 18;

		/** @see Type */
		required Types type = 9;

		/** Value. */
		oneof value {
			bool valueBoolean = 10;
			bytes valueBytes = 15;
			double valueNumber = 11;
			string valueString = 12;
		}

		/** Value (string array). */
		repeated string valueStrings = 19;

		/** Flexbox column width (as a percentage of the total row width). */
		uint32 width = 13;
	}

	/** Row or column of elements. */
	message ElementContainer {
		/** @see ElementOrElementContainer */
		repeated ElementOrElementContainer elements = 1;

		/**
		 * String-encoded function for collapsing element values when sending to another system.
		 * Element values are referenced by index (e.g. '${0}') and arithmetic operations can be
		 * performed using a CSS-like calc syntax (e.g. 'calc(4+5)' or 'calc(${0}+${1})').
		 *
		 * Must be two lines: the first line collapses the element values (returns string) and
		 * the second line reverses the transformation (returns JSON array). In the latter case,
		 * ${val} will refer to the input value.
		 */
		string formula = 3;

		/** @see Form.id */
		string id = 2;

		/** @see Component.isColumn */
		bool isColumn = 4;
	}

	/** Either an Element or ElementContainer. */
	message ElementOrElementContainer {
		/** Value. */
		oneof value {
			/** @see Element */
			Element element = 1;

			/** @see ElementContainer */
			ElementContainer elementContainer = 2;
		}
	}

	/** @see Component */
	repeated Component components = 1;

	/** Optional ID. Can be used for associating with fields in other systems. */
	string id = 2;

	/** If true, this form will be displayed in an accordion expansion panel. */
	bool isExpansionPanel = 3;
}

/** An asymmetric key pair. */
message KeyPair {
	/** Private key. */
	required bytes privateKey = 1;

	/** Public key. */
	required bytes publicKey = 2;
}

/** Link connection email value. */
message LinkConnectionEmail {
	/** Email subject. */
	string subject = 1;

	/** Email text. */
	string text = 2;
}

/** Local storage lock claim value. */
message LocalStorageLockMetadata {
	/** ID. */
	string id = 1;

	/** Reason. */
	string reason = 2;
}

/** Local storage value. */
message LocalStorageValue {
	/** Timestamp. */
	required double timestamp = 1;

	/** Value. */
	required bytes value = 2;
}

/** Push notification types. */
enum NotificationTypes {
	Yo = 0;
	CalendarEvent = 3;
	Call = 6;
	ContactAccept = 4;
	ContactRequest = 5;
	File = 1;
	Message = 2;
}

/** A stored password. */
message Password {
	/** Password. */
	required string password = 1;

	/** URL. */
	string url = 2;

	/** Username. */
	string username = 3;
}

/** Patient information for Telehealth. */
message PatientInfo {
	/** Additional data for a contact. */
	message ContactAdditionalData {
		/** Whether there is consent to share medical information with the contact. */
		bool consentToShare = 1;

		/** Cyph username for the contact if they have one. */
		string cyphAccount = 2;
	}

	/** Mapping of contact email addresses to ContactAdditionalData objects. */
	map<string, ContactAdditionalData> contactAdditionalData = 1;

	/** Patient record as synced to/from EHR systems. */
	RedoxPatient redoxPatient = 2;
}

/** A PGP key. */
message PGPKey {
	/** @see PGPMetadata */
	required PGPMetadata pgpMetadata = 1;

	/** Value. */
	oneof value {
		bytes publicKey = 2;
		KeyPair keyPair = 3;
	}
}

/** PGP key metadata. */
message PGPMetadata {
	/** Comment. */
	string comment = 1;

	/** Email address of key owner. */
	string email = 2;

	/** Expiration timestamp (if applicable). */
	double expires = 3;

	/** Fingerprint. */
	string fingerprint = 4;

	/** Abbreviated (64-bit) fingerprint. */
	string keyID = 5;

	/** Name of key owner. */
	string name = 6;

	/** Full user ID string (name + email + comment). */
	string userID = 7;
}

/** A message that can be signed by a PGP key to authenticate its ownership by a Cyph user. */
message PGPVerification {
	/** Username. */
	required string username = 1;

	/** A string used to prove the purpose of this signed data. */
	required string verificationString = 2;
}

/** A Potassium data object. */
message PotassiumData {
	/** Potassium.Box algorithms. */
	enum BoxAlgorithms {
		None = 0;
		NativeV1 = 1;
		V1 = 2;
		V2 = 3;
	}

	/** Potassium.EphemeralKeyExchange algorithms. */
	enum EphemeralKeyExchangeAlgorithms {
		None = 0;
		V1 = 1;
		V2 = 2;
	}

	/** Potassium.OneTimeAuth algorithms. */
	enum OneTimeAuthAlgorithms {
		None = 0;
		NativeV1 = 1;
		V1 = 2;
	}

	/** Potassium.SecretBox algorithms. */
	enum SecretBoxAlgorithms {
		None = 0;
		NativeV1 = 1;
		V1 = 2;
	}

	/** Potassium.Sign algorithms. */
	enum SignAlgorithms {
		None = 0;
		NativeV1 = 1;
		V1 = 2;
		V2 = 3;
		V2Hardened = 4;
	}

	/** Algorithm. */
	oneof algorithm {
		/** @see BoxAlgorithms */
		BoxAlgorithms boxAlgorithm = 1;

		/** @see EphemeralKeyExchangeAlgorithms */
		EphemeralKeyExchangeAlgorithms ephemeralKeyExchangeAlgorithm = 2;

		/** @see OneTimeAuthAlgorithms */
		OneTimeAuthAlgorithms oneTimeAuthAlgorithm = 3;

		/** @see SecretBoxAlgorithms */
		SecretBoxAlgorithms secretBoxAlgorithm = 4;

		/** @see SignAlgorithms */
		SignAlgorithms signAlgorithm = 5;
	}

	/** Value. */
	oneof value {
		/** Cyphertext. */
		bytes cyphertext = 6;

		/** Symmetric key. */
		bytes key = 7;

		/** MAC. */
		bytes mac = 8;

		/** Private key. */
		bytes privateKey = 9;

		/** Public key. */
		bytes publicKey = 10;

		/** Key exchange secret. */
		bytes secret = 11;

		/** Signature. */
		bytes signature = 12;

		/** @see CombinedSignature */
		CombinedSignature signed = 13;
	}
}

/** Private keyring. */
message PrivateKeyring {
	/** Map of Potassium.BoxAlgorithms values to key pairs. */
	map<uint32, KeyPair> boxPrivateKeys = 1;

	/** Map of Potassium.EphemeralKeyExchangeAlgorithms values to key pairs. */
	map<uint32, KeyPair> ephemeralKeyExchangePrivateKeys = 2;

	/** Map of Potassium.OneTimeAuthAlgorithms values to secret keys. */
	map<uint32, bytes> oneTimeAuthPrivateKeys = 3;

	/** Map of Potassium.SecretBoxAlgorithms values to secret keys. */
	map<uint32, bytes> secretBoxPrivateKeys = 4;

	/** Map of Potassium.SignAlgorithms values to key pairs. */
	map<uint32, KeyPair> signPrivateKeys = 5;
}

/** Public keyring. */
message PublicKeyring {
	/** Map of Potassium.BoxAlgorithms values to public keys. */
	map<uint32, bytes> boxPublicKeys = 1;

	/** Map of Potassium.EphemeralKeyExchangeAlgorithms values to public keys. */
	map<uint32, bytes> ephemeralKeyExchangePublicKeys = 2;

	/** Map of Potassium.SignAlgorithms values to public keys. */
	map<uint32, bytes> signPublicKeys = 3;
}

/** @see https://developer.redoxengine.com/data-models/Scheduling.html#New */
message RedoxAppointment {
	/** Patient data. */
	message PatientType {
		/** @see RedoxPatient.Demographics */
		RedoxTypes.Patient.Demographics Demographics = 1;

		/** @see RedoxPatient.Identifiers */
		repeated RedoxTypes.Identifier Identifiers = 2;

		/** @see RedoxPatient.Notes */
		repeated string Notes = 3;
	}

	/** @see RedoxTypes.AppointmentInfo */
	repeated RedoxTypes.AppointmentInfo AppointmentInfo = 1;

	/** @see PatientType */
	PatientType Patient = 2;

	/** @see RedoxTypes.Visit */
	repeated RedoxTypes.Visit Visit = 3;
}

/**
 * @see https://developer.redoxengine.com/data-models/ClinicalSummary.html#PatientQueryResponse
 * TODO: Finish this.
 */
message RedoxClinicalSummary {
	/** List of patient's allergies. */
	repeated RedoxTypes.Allergy allergies = 1;
}

/** Redox message metadata. */
message RedoxMeta {
	/**
	 * Record in Redox that corresponds to the communication sent from the source to Redox.
	 * Included in messages from Redox.
	 */
	message RedoxMessage {
		/** ID. */
		string ID = 1;
	}

	/** Redox source or destination. */
	message RedoxSource {
		/** ID. */
		required string ID = 1;

		/** Name. */
		string Name = 2;
	}

	/**
	 * Record in Redox that corresponds to the communication sent from Redox to your destination.
	 * Included in messages from Redox.
	 */
	message RedoxTransmission {
		/** ID. */
		string ID = 1;
	}

	/** e.g. Scheduling, Results */
	required string DataModel = 1;

	/** e.g. New, Update, Activate, Deactivate */
	required string EventType = 2;

	/** ISO 8601 timestamp. */
	string EventDateTime = 3;

	/** Indicates whether message was from a test environment. */
	bool Test = 4;

	/** Where the message originated. Included in messages from Redox. */
	RedoxSource Source = 5;

	/**
	 * List of destinations to send your message to. All messages must have at least one
	 * destination. Queries accept only one destination.
	 * Required when sending data to Redox.
	 */
	repeated RedoxSource Destinations = 6;

	/** @see RedoxMessage */
	RedoxMessage Message = 7;

	/** @see RedoxTransmission */
	RedoxTransmission Transmission = 8;
}

/** @see https://developer.redoxengine.com/data-models/PatientSearch.html#Response */
message RedoxPatient {
	/** List of (emergency) contacts for the patient. */
	repeated RedoxTypes.Contact Contacts = 1;

	/** Descriptive patient information - modeled from Redox. */
	RedoxTypes.Patient.Demographics Demographics = 2;

	/** Patient identifiers. */
	repeated RedoxTypes.Identifier Identifiers = 3;

	/** List of insurance(s) for the patient. */
	repeated RedoxTypes.Insurance Insurances = 4;

	/** List of patient-level notes. */
	repeated string Notes = 5;

	/** Patient's Primary Care Provider. */
	RedoxTypes.PCP PCP = 6;
}

/** Redox data types. */
message RedoxTypes {
	/** Address / Physical Location. */
	message Address {
		/** City for the address, e.g. McLean. */
		string City = 1;

		/** Country for the address, e.g. US. */
		string Country = 2;

		/** County for the address, e.g. Fairfax. */
		string County = 3;

		/** State for the address, e.g. VA. */
		string State = 4;

		/** Street address for the address, e.g. 6885 Elm Street. */
		string StreetAddress = 5;

		/** 5 digit zip code for the address, e.g. 22101. */
		string ZIP = 6;
	}

	/** An allergy to a medication, food, or substance. */
	message Allergy {
		/** A value represented by some code. */
		message CodedValue {
			/** Code value. */
			string Code = 1;

			/** ID of the coding system to which the code belongs in OID format. */
			string CodeSystem = 2;

			/**
			 * Coding system to which the code belogs.
			 * (e.g. SNOMED CT, LOINC, RxNorm, CVX, ICD9, ICD10)
			 */
			string CodeSystemName = 3;

			/** Name of the code value. */
			string Name = 4;
		}

		/** A reaction that occurs when the allergen is introduced. */
		message ReactionType {
			/** @see CodedValue.Code */
			string Code = 1;

			/** @see CodedValue.CodeSystem */
			string CodeSystem = 2;

			/** @see CodedValue.CodeSystemName */
			string CodeSystemName = 3;

			/** @see CodedValue.Name */
			string Name = 4;

			/** Severity. */
			CodedValue Severity = 5;

			/**
			 * Free text form of reactions to this substance.
			 * Includes information that cannot be captured by coded value.
			 */
			string Text = 6;
		}

		/** Free text comment about the allergy. */
		string Comment = 1;

		/** Represents the gravity of potential risk for future life-threatening reactions. */
		CodedValue Criticality = 2;

		/** When the allergy was no longer a problem (if applicable). (ISO 8601) */
		string EndDate = 3;

		/** List of reactions that occur when the allergen is introduced. */
		repeated ReactionType Reaction = 4;

		/** Describes the severity of the reaction. */
		CodedValue Severity = 5;

		/** Date the allergy was identified. (ISO 8601) */
		string StartDate = 6;

		/** Describes the current status of the allergy (active, historic, etc.). */
		CodedValue Status = 7;

		/** Describes the substance that causes the allergy. Typically RxNorm or SNOMED. */
		CodedValue Substance = 8;

		/** Describes the type of allergy intolerance this is (food, drug, etc.). */
		CodedValue Type = 9;
	}

	/** List of supplementary clinical information associated with the appointment. */
	message AppointmentInfo {
		/** Code for the information element. */
		string Code = 1;

		/** Code set used to identify the information element. */
		string Codeset = 2;

		/** Description of the information element. */
		string Description = 3;

		/** The value of the corresponding AppointmentInfo code. */
		string Value = 4;
	}

	/** A value represented by some code and codeset. */
	message CodesetValue {
		/** Code for the information element. */
		string Code = 1;

		/** Code set used to identify the information element. */
		string Codeset = 2;

		/** Name. */
		string Name = 3;

		/** Type. */
		string Type = 4;
	}

	/** Emergency Contact for the patient. */
	message Contact {
		/** @see Address */
		Address Address = 1;

		/** List of email addresses for the contact. */
		repeated string EmailAddresses = 2;

		/** First name. */
		string FirstName = 3;

		/** Last name. */
		string LastName = 4;

		/** Middle name - multiple middle names concatenated into this field. */
		string MiddleName = 5;

		/** @see PhoneNumber */
		PhoneNumber PhoneNumber = 6;

		/** Personal relationship to the patient. e.g. Father, Spouse. */
		string RelationToPatient = 7;

		/** Role of this contact for the patient. e.g. Employer, Emergency Contact. */
		repeated string Roles = 8;
	}

	/** Identifiers - from Redox. */
	message Identifier {
		/** Unique ID value. */
		required string ID = 1;

		/** Type of ID. e.g. MRN, EPI. */
		required string IDType = 2;
	}

	/** Patient's insurance info. */
	message Insurance {
		/** The insurance company. */
		message CompanyType {
			/** @see Address */
			Address Address = 1;

			/** ID of insurance company (payor). */
			string ID = 2;

			/** ID type of insurance company (payor). */
			string IDType = 3;

			/** Name of insurance company (payor). */
			string Name = 4;

			/** Insurance company's phone number. In E. 164 Format (i.e. +16085551234). */
			string PhoneNumber = 5;
		}

		/** Individual who has the agreement with the insurance company for the related policy. */
		message InsuredType {
			/** @see Address */
			Address Address = 1;

			/** Insurance policy holder's date of birth. (ISO 8601) */
			string DOB = 2;

			/** First name. */
			string FirstName = 3;

			/** Last name. */
			string LastName = 4;

			/**
			 * Relationship of the insured to the patient.
			 * One of the following: "Self", "Spouse", "Other" (Redox).
			 */
			string Relationship = 5;

			/**
			 * Insurance policy holder's sex.
			 * One of the following: "Female", "Male", "Unknown", "Other" (Redox).
			 */
			string Sex = 6;
		}

		/** The insurance plan. */
		message PlanType {
			/** Identifier of insurance plan. */
			string ID = 1;

			/** ID type of insurance plan. */
			string IDType = 2;

			/** Name of insurance plan. */
			string Name = 3;

			/** Type of insurance plan. */
			string Type = 4;
		}

		/**
		 * Type of insurance agreement.
		 * One of the following: "Standard", "Unified", "Maternity" (Redox).
		 */
		string AgreementType = 1;

		/** @see CompanyType */
		CompanyType Company = 7;

		/**
		 * Type of insurance agreement. Indicates who will be receiving the bill for the service.
		 * One of the following: "Patient", "Clinic", "Insurance", "Other" (Redox).
		 */
		string CoverageType = 2;

		/** Effective date of this insurance policy. (Redox uses YYYY-MM-DD). */
		string EffectiveDate = 3;

		/** Expiration date of this insurance policy. (Redox uses YYYY-MM-DD). */
		string ExpirationDate = 4;

		/** Insurance policy group name. */
		string GroupName = 6;

		/** Insurance policy group number. */
		string GroupNumber = 5;

		/** @see InsuredType */
		InsuredType Insured = 8;

		/** Insurance member number. */
		string MemberNumber = 9;

		/** @see PlanType */
		PlanType Plan = 10;

		/** Insurance policy number. */
		string PolicyNumber = 11;
	}

	/** Location details. */
	message Location {
		/** Department. */
		required string Department = 1;

		/** e.g. Community Hospital. */
		string Facility = 2;

		/** e.g. 136. */
		string Room = 3;

		/** e.g. Clinic, Department, Home, Nursing Unit, Provider's Office, Phone. */
		string Type = 4;
	}

	/** Primary Care Provider for the Patient. */
	message PCP {
		/** @see Provider.Address */
		Address Address = 1;

		/** @see Provider.Credentials */
		repeated string Credentials = 2;

		/** @see Provider.FirstName */
		string FirstName = 3;

		/** @see Provider.ID */
		required string ID = 4;

		/** @see Provider.IDType */
		required string IDType = 5;

		/** @see Provider.LastName */
		string LastName = 6;

		/** @see Provider.Location */
		Location Location = 7;

		/** National Provider Identifier for the primary care provider. */
		string NPI = 8;

		/** @see Provider.PhoneNumber */
		PhoneNumber PhoneNumber = 9;
	}

	/** Someone's phone number. */
	message PhoneNumber {
		/** Home phone number. */
		string Home = 1;

		/** Mobile phone number. */
		string Mobile = 2;

		/** Office phone number. */
		string Office = 3;
	}

	/** A patient. */
	message Patient {
		/** Descriptive patient information. */
		message Demographics {
			/** The patient's address. */
			Address Address = 1;

			/** Reference: http://www.nationsonline.org/oneworld/country_code_list.htm */
			repeated string Citizenship = 2;

			/** Date and time the patient was proclaimed deceased. (ISO 8601) */
			string DeathDateTime = 3;

			/** Patient's date of birth. (ISO 8601) */
			string DOB = 4;

			/** List of email addresses for the patient. */
			repeated string EmailAddresses = 5;

			/** First name. */
			string FirstName = 6;

			/** He's dead, Jim. */
			bool IsDeceased = 7;

			/** Is the patient hispanic? */
			bool IsHispanic = 8;

			/** Patient's primary spoken language. In ISO 639-1 alpha values (e.g. 'en'). */
			string Language = 9;

			/** Last name. */
			string LastName = 10;

			/** Supported values: http://www.hl7.org/FHIR/v2/0002/index.html */
			string MaritalStatus = 11;

			/** Middle name - multiple middle names concatenated into this field. */
			string MiddleName = 12;

			/** @see PhoneNumber */
			PhoneNumber PhoneNumber = 13;

			/** The patient's race. */
			string Race = 14;

			/**
			* The patient's sex.
			* One of the following: "Female", "Male", "Unknown", "Other" (Redox).
			*/
			string Sex = 15;

			/** The patient's social security number. */
			string SSN = 16;
		}
	}

	/** A care provider. */
	message Provider {
		/** Descriptive provider information. */
		message Demographics {
			/** The provider's addresses. */
			repeated Address Addresses = 1;

			/** e.g. M.D., Psy.D. */
			repeated string Credentials = 2;

			/** Provider's date of birth. (ISO 8601) */
			string DOB = 3;

			/** List of email addresses for the provider. */
			repeated string EmailAddresses = 4;

			/** First name. */
			string FirstName = 5;

			/**
			 * Languages the provider is able to use in patient communication.
			 * In ISO 639-1 alpha values (e.g. 'en').
			 */
			repeated string Languages = 6;

			/** Last name. */
			string LastName = 7;

			/** Middle name - multiple middle names concatenated into this field. */
			string MiddleName = 8;

			/** @see PhoneNumber */
			PhoneNumber PhoneNumber = 9;

			/**
			* The provider's sex.
			* One of the following: "Female", "Male", "Unknown", "Other" (Redox).
			*/
			string Sex = 10;
		}

		/** Provider's qualifications obtained by training and certification. */
		message Qualifications {
			/** e.g. MD */
			string Code = 2;

			/** e.g. http://hl7.org/fhir/v2/0360/2.7" */
			string Codeset = 3;

			/** Description. */
			string Description = 4;

			/** End date of the qualification. ISO 8601 format, e.g. 2001-09-11 */
			string EndDate = 6;

			/** @see Identifier */
			Identifier ID = 1;

			/** Start date of the qualification. ISO 8601 format, e.g. 2001-09-11 */
			string StartDate = 5;
		}

		/** Roles that the provider is associated with. */
		message Roles {
			/** Times the service location is available */
			message LocationAvailability {
				/** Closing time of day. ISO 8601 Format. */
				string AvailableEndTime = 3;

				/** Opening time of day. ISO 8601 Format. */
				string AvailableStartTime = 2;

				/**
				 * List of days that this availability schedule applies to.
				 * One of: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.
				 */
				repeated string Days = 1;
			}

			/** Organization where the role is available. */
			message Organization {
				/** @see Address */
				Address Address = 6;

				/** @see Identifier */
				Identifier ID = 1;

				/** Whether this role is in active use. */
				string IsActive = 2;

				/** e.g. Redox Clinic */
				string Name = 5;

				/** e.g. Provider */
				string Type = 4;
			}

			/** The location(s) at which the provider provides care. */
			message RedoxLocations {
				/** @see Address */
				Address Address = 5;

				/** Description. */
				string Description = 4;

				/** List of email addresses for the location. */
				repeated string EmailAddresses = 6;

				/** @see Identifier */
				Identifier ID = 1;

				/** Location Name, e.g. Redox Clinic. */
				string Name = 3;

				/** @see PhoneNumber */
				repeated PhoneNumber PhoneNumber = 7;

				/** One of Active, Suspended, Inactive. */
				string Status = 2;
			}

			/**
			 * The list of healthcare services that this worker provides
			 * for this role's Organization/Location(s).
			 */
			message RedoxServices {
				/** Description of the service. */
				string Description = 3;

				/** @see Identifier */
				Identifier ID = 1;

				/** @see PhoneNumber */
				PhoneNumber PhoneNumber = 4;

				/** Type of service that may be delivered or performed, e.g. Nutrition. */
				string Type = 2;
			}

			/** Coded representation of the specialty. */
			message RedoxSpecialties {
				/** Code. */
				string Code = 1;

				/** e.g. SnomedCT. */
				string Codeset = 2;

				/** e.g. General Medicine. */
				string Description = 3;
			}

			/** @see LocationAvailability */
			LocationAvailability Availability = 6;

			/** @see Identifier */
			Identifier ID = 1;

			/** @see RedoxLocations */
			RedoxLocations Locations = 4;

			/** @see Organization */
			Organization Org = 2;

			/** @see RedoxServices */
			RedoxServices Services = 5;

			/** @see RedoxSpecialties */
			RedoxSpecialties Specialties = 3;
		}

		/** @see Address */
		Address Address = 1;

		/** e.g. M.D., Psy.D. */
		repeated string Credentials = 2;

		/** First name. */
		string FirstName = 3;

		/** Unique ID value. */
		required string ID = 4;

		/** Type of ID. e.g. MRN, EPI. */
		required string IDType = 5;

		/** Whether the entry for this provider is active or inactive. */
		bool IsActive = 9;

		/** Last name. */
		string LastName = 6;

		/** @see Location */
		Location Location = 7;

		/** @see PhoneNumber */
		PhoneNumber PhoneNumber = 8;
	}

	/** Visit metadata. */
	message Visit {
		/**
		 * An ID that can span several visits often related to the same issue.
		 * (Pregnancy, surgeries, research study, etc.)
		 */
		string AccountNumber = 1;

		/** Attending provider. */
		Provider AttendingProvider = 2;

		/** Consulting provider. */
		Provider ConsultingProvider = 3;

		/** List of diagnoses associated with this visit. */
		repeated CodesetValue Diagnoses = 4;

		/** Duration in minutes. */
		required uint32 Duration = 5;

		/** Appointment instructions. */
		repeated string Instructions = 6;

		/** Location. */
		Location Location = 7;

		/**
		 * Patient class is used in many EHRs to determine where to put the patient.
		 * e.g. Outpatient, Hosptial Outpatient Department.
		 */
		string PatientClass = 8;

		/** Reason for appointment. */
		string Reason = 9;

		/** Referring provider. */
		Provider ReferringProvider = 10;

		/**
		 * One of the following: Scheduled, Arrived, Completed, Canceled,
		 * Left without being seen, No show.
		 */
		string Status = 11;

		/** Datetime. (ISO 8601) */
		required string VisitDateTime = 12;

		/** Unique ID of a single visit. */
		required string VisitNumber = 13;

		/** Visit provider. */
		Provider VisitProvider = 14;
	}
}

/** A review of something. */
message Review {
	/** A rating between 0 and 100. */
	required uint32 rating = 1;

	/** Review text. */
	string text = 2;

	/** Timestamp of this review. */
	required double timestamp = 3;
}

/** Misc information about the state of a chat. */
message SessionChatState {
	/** Indicates whether this party is actively typing. */
	required bool isTyping = 1;
}

/** Contains an RPC call for a specific method. */
message SessionCommand {
	/** Used to ensure that the command is being run in the correct context (e.g. P2P session). */
	string additionalData = 1;

	/** Argument to pass to method (serialized with MessagePack). */
	bytes argument = 2;

	/** Method name. */
	required string method = 3;
}

/** Message to be sent over a session, indicating some RPC event. */
message SessionMessage {
	/** Event name (e.g. "text"). */
	required string event = 1;

	/** Associated data (e.g. a user-facing chat message). */
	required SessionMessageData data = 2;
}

/** Message data. */
message SessionMessageData {
	/** @see ChatMessage.authorID */
	string authorID = 1;

	/** Arbitrary bytes. */
	bytes bytes = 4;

	/** @see SessionChatState */
	SessionChatState chatState = 6;

	/** @see SessionCommand */
	SessionCommand command = 7;

	/** Unique ID. */
	required string id = 2;

	/** If applicable, ID of an isolated exchange of messages within a session. */
	string sessionSubID = 8;

	/** @see SessionText */
	SessionText text = 9;

	/** @see SessionTextConfirmation */
	SessionTextConfirmation textConfirmation = 10;

	/** Timestamp of this message. */
	required double timestamp = 3;
}

/** Array of session messages. */
message SessionMessageList {
	/** Messages. */
	repeated SessionMessage messages = 1;
}

/** Array of session message data objects. */
message SessionMessageDataList {
	/** Message data objects. */
	repeated SessionMessageData messages = 1;
}

/** Contains an actual chat text message. */
message SessionText {
	/** @see ChatMessage.hash */
	required bytes hash = 5;

	/** @see ChatMessage.key */
	required bytes key = 6;

	/** @see ChatMessage.predecessors */
	repeated ChatMessagePredecessor predecessors = 8;

	/** Indicates whether entire chat should be self-destructed (only valid for first message). */
	bool selfDestructChat = 2;

	/** Self-destruction timeout. */
	uint32 selfDestructTimeout = 3;
}

/** Receipt confirmation for a SessionText. */
message SessionTextConfirmation {
	/** SessionText ID to be confirmed. */
	required string id = 1;
}

/** A cryptocurrency wallet. */
message Wallet {
	/** @see Cryptocurrencies */
	required Cryptocurrencies cryptocurrency = 1;

	/**
	 * If true, will use an old-style uncompressed public key.
	 * This uses the same private key but corresponds to a different address.
	 */
	bool uncompressedPublicKey = 4;

	/** Value. */
	oneof value {
		string address = 2;
		bytes key = 3;
	}
}


/* Generic/primitive types */

message Internal {
	message BooleanArray {
		repeated bool data = 1;
	}

	message BooleanMap {
		map<string, bool> data = 1;
	}

	message BooleanValue {
		required bool data = 1;
	}

	message BinaryArray {
		repeated bytes data = 1;
	}

	message MaybeTimedValue {
		bool empty = 1;
		double timestamp = 2;
		bytes value = 3;
	}

	message MaybeTimedValueArray {
		repeated MaybeTimedValue data = 1;
	}

	message NumberArray {
		repeated double data = 1;
	}

	message NumberValue {
		required double data = 1;
	}

	message StringArray {
		repeated string data = 1;
	}

	message StringMap {
		map<string, string> data = 1;
	}

	message StringValue {
		required string data = 1;
	}

	message TimedValue {
		required double timestamp = 1;
		required bytes value = 2;
	}

	message TimedValueArray {
		repeated TimedValue data = 1;
	}

	message Uint32Array {
		repeated uint32 data = 1;
	}

	message Uint32Value {
		required uint32 data = 1;
	}
}
