/* Tempoprary workaround pending migration from legacy components to MDC */
@use '/node_modules/@angular/material/expansion/expansion-theme' as
	mat-expansion-panel;
@use '/node_modules/@angular/material/legacy-autocomplete/autocomplete-theme' as
	mat-autocomplete;
@use '/node_modules/@angular/material/legacy-button/button-theme' as mat-button;
@use '/node_modules/@angular/material/legacy-card/card-theme' as mat-card;
@use '/node_modules/@angular/material/legacy-checkbox/checkbox-theme' as
	mat-checkbox;
@use '/node_modules/@angular/material/legacy-chips/chips-theme' as mat-chips;
@use '/node_modules/@angular/material/legacy-core/option/option-theme' as
	mat-option;
@use '/node_modules/@angular/material/legacy-dialog/dialog-theme' as mat-dialog;
@use '/node_modules/@angular/material/legacy-form-field/form-field-theme' as
	mat-form-field;
@use '/node_modules/@angular/material/legacy-input/input-theme' as mat-input;
@use '/node_modules/@angular/material/legacy-list/list-theme' as mat-list;
@use '/node_modules/@angular/material/legacy-progress-bar/progress-bar-theme' as
	mat-progress-bar;
@use '/node_modules/@angular/material/legacy-progress-spinner/progress-spinner-theme'
	as mat-progress-spinner;
@use '/node_modules/@angular/material/legacy-select/select-theme' as mat-select;
@use '/node_modules/@angular/material/legacy-tabs/tabs-theme' as mat-tabs;

@use '@angular/material' as mat;

$accountPaddingLarge: 7.5vw;
$accountPaddingMedium: 5vw;
$accountPaddingSmall: 2.5vw;
$mobileMessageBorderRadius: 16px;

$default-white: map-get(mat.$grey-palette, 100);

@mixin breathe {
	animation-name: breathe !important;
	animation-duration: 3s !important;
	animation-timing-function: ease-in-out !important;
	animation-iteration-count: infinite !important;
}

@mixin center {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin disabled {
	opacity: 0.5;
	pointer-events: none;
}

/* Changes size of mat-icon */
@mixin icon-size($size) {
	font-size: $size;
	height: $size;
	min-height: $size;
	width: $size;
	min-width: $size;
	line-height: $size;
}

@mixin shadow {
	filter: drop-shadow((-2px) 2px 2px rgba(0, 0, 0, 0.15));
}

/* Centers cyph-spinner */
@mixin spinner-center {
	@include center;
}

@mixin vertical-align {
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}

@mixin cyph-apply-theme($isRoot: false, $partialInversion: false) {
	$root: if($isRoot, 'body', '&');

	$cyph-theme: cyph-theme-default();
	$cyph-theme-inverted: cyph-theme-inverted();
	$cyph-theme-partial-inverted: cyph-theme-partial-inverted();

	$cyph-theme-white: cyph-theme(
		$cyph-white,
		$cyph-white,
		$cyph-warn,
		$cyph-foreground,
		$cyph-background,
		$cyph-is-dark
	);

	$cyph-speed-dial-action-palette: mat.define-palette(
		mat.$grey-palette,
		50,
		50,
		100
	);

	$cyph-speed-dial-action-theme: cyph-theme(
		$cyph-speed-dial-action-palette,
		map-merge(
			$cyph-speed-dial-action-palette,
			(
				default-contrast: map-get($cyph-message-box-colors, buttons)
			)
		),
		$cyph-warn,
		$cyph-background,
		$cyph-foreground,
		false
	);

	@include cyph-main-theme;

	@if $partialInversion {
		@include theme-alt($cyph-theme-inverted, $cyph-theme-partial-inverted);

		.cyph-#{if($cyph-is-dark, 'dark', 'light')}-theme {
			@include theme-alt($cyph-theme, $cyph-theme-partial-inverted);
		}

		mat-paginator .mat-select-value-text {
			color: $cyph-foreground !important;
		}
	}

	@if $cyph-loading-animation-filter != null {
		.logo-animation *,
		.logo-animation:after,
		cyph-account .cyph-gradient {
			filter: $cyph-loading-animation-filter;
		}
	}

	@if $cyph-is-dark {
		mat-card,
		mat-dialog-container {
			@include mat-form-field.theme($cyph-theme-white);
			@include mat-input.theme($cyph-theme-white);
		}
	}

	#{$root},
	#main,
	.cyph-foreground {
		background-color: $cyph-background;
		color: $cyph-foreground;
	}

	hr {
		border-color: $cyph-foreground;
	}

	cyph-chat-message a[href],
	cyph-chat-message a[router-link],
	cyph-quill > .disabled .ql-snow a {
		color: $cyph-hyperlinks;
	}

	blockquote {
		border-left: 2px solid $cyph-foreground;
	}

	.cyph-banner {
		color: $cyph-background;
		background-color: $cyph-foreground;

		&.alert {
			color: $cyph-alert-foreground;
			background-color: $cyph-alert-background;
			font-weight: bold;
		}

		&.inverted {
			color: $cyph-foreground;
			background-color: $cyph-background;
		}

		&.dark {
			$dark-foreground: if(
				$cyph-is-dark,
				$cyph-foreground,
				$cyph-inverted
			);
			$dark-background: if(
				$cyph-is-dark,
				$cyph-inverted,
				$cyph-foreground
			);

			color: $dark-foreground;
			background-color: $dark-background;

			@include mat-progress-spinner.theme(
				map-merge(
					$cyph-theme,
					(
						primary:
							map-merge(
								map-get($cyph-theme, primary),
								(
									lighter: rgba(0, 0, 0, 0.15),
									default: $dark-foreground
								)
							)
					)
				)
			);
		}

		&.warn,
		.warn {
			color: map-get($cyph-warn, default);
		}
	}

	cyph-account {
		.header {
			color: if($cyph-is-dark, $cyph-foreground, $cyph-background);
			background-color: map-get($cyph-accent, default);

			&:after {
				background-color: map-get($cyph-accent, 300);
			}
		}

		.file-upload,
		.password-option.deselected,
		cyph-account-register mat-expansion-panel .password-option.deselected {
			border-color: $cyph-foreground;

			&:hover {
				border-color: rgba($cyph-foreground, 0.75);
			}
		}

		cyph-account-register {
			@include mat-checkbox.theme($cyph-theme);
			@include mat-expansion-panel.theme($cyph-theme);

			mat-expansion-panel {
				@include mat-form-field.theme($cyph-theme);
			}

			.password-option.deselected {
				border-color: $cyph-background;

				&:hover {
					border-color: rgba($cyph-background, 0.75);
				}
			}
		}

		.interstitial {
			background-color: rgba(map-get($cyph-accent, 400), 0.69) !important;
		}
	}

	cyph-account-call-waiting {
		.avatar.call {
			border-color: map-get($cyph-primary, default);
			background-color: map-get($cyph-primary, default);
		}
	}

	cyph-account-menu {
		.menu {
			background-color: if(
				(
					($cyph-is-dark and not $partialInversion) or
						(not $cyph-is-dark and $partialInversion)
				),
				map-get($cyph-accent, darker),
				$cyph-background
			);

			@if $partialInversion {
				color: $cyph-inverted;
			}
		}
	}

	cyph-account-post {
		.reaction-count {
			color: map-get($cyph-accent, default);
		}
	}

	cyph-account-profile {
		.profile .buttons button {
			background-color: map-get($cyph-primary, default);
		}
	}

	cyph-chat-main {
		.avatar.call {
			border-color: map-get($cyph-primary, default);
			background-color: map-get($cyph-primary, default);
		}

		.chat-main.video .friend-is-typing .ellipsis-spinner > div {
			background-color: $cyph-inverted;
		}

		.friend-is-typing .ellipsis-spinner > div {
			background-color: $cyph-foreground;
		}

		.chat-main.video
			.video-call
			~ cyph-chat-message-box
			.menu-button
			mat-icon {
			color: $cyph-inverted !important;
		}

		.chat-main.mobile,
		.chat-main.video .video-call ~ cyph-chat-message-list {
			.message-item.ui-style-default.author-app {
				background-color: map-get(
					map-get($cyph-message-colors, app),
					mobile
				);

				@if map-has-key(map-get($cyph-message-colors, app), mobileText)
				{
					color: map-get(
						map-get($cyph-message-colors, app),
						mobileText
					);
				}

				@if map-has-key(
					map-get($cyph-message-colors, app),
					mobileSpinner
				)
				{
					@include mat-progress-spinner.theme(
						map-merge(
							$cyph-theme,
							(
								primary:
									map-merge(
										$cyph-primary,
										(
											default:
												map-get(
													map-get(
														$cyph-message-colors,
														app
													),
													mobileSpinner
												)
										)
									)
							)
						)
					);
				}
			}

			.message-item.ui-style-default.author-local {
				background-color: map-get(
					map-get($cyph-message-colors, me),
					mobile
				);

				@if map-has-key(map-get($cyph-message-colors, me), mobileText) {
					color: map-get(
						map-get($cyph-message-colors, me),
						mobileText
					);
				}

				@if map-has-key(
					map-get($cyph-message-colors, me),
					mobileSpinner
				)
				{
					@include mat-progress-spinner.theme(
						map-merge(
							$cyph-theme,
							(
								primary:
									map-merge(
										$cyph-primary,
										(
											default:
												map-get(
													map-get(
														$cyph-message-colors,
														me
													),
													mobileSpinner
												)
										)
									)
							)
						)
					);
				}

				&:after {
					border-color: transparent
						map-get(map-get($cyph-message-colors, me), mobile);
				}
			}

			.message-item.ui-style-default.author-remote {
				background-color: map-get(
					map-get($cyph-message-colors, other),
					mobile
				);

				@if map-has-key(
					map-get($cyph-message-colors, other),
					mobileText
				)
				{
					color: map-get(
						map-get($cyph-message-colors, other),
						mobileText
					);
				}

				@if map-has-key(
					map-get($cyph-message-colors, other),
					mobileSpinner
				)
				{
					@include mat-progress-spinner.theme(
						map-merge(
							$cyph-theme,
							(
								primary:
									map-merge(
										$cyph-primary,
										(
											default:
												map-get(
													map-get(
														$cyph-message-colors,
														other
													),
													mobileSpinner
												)
										)
									)
							)
						)
					);
				}

				&:after {
					border-color: transparent
						map-get(map-get($cyph-message-colors, other), mobile);
				}
			}
		}
	}

	cyph-chat-cyphertext {
		color: $cyph-cyphertext-foreground;

		@include mat.all-legacy-component-themes($cyph-cyphertext-theme);
	}

	cyph-chat-message {
		.message-item.ui-style-default {
			&.author-app {
				background-color: map-get(
					map-get($cyph-message-colors, app),
					desktop
				);
				color: map-get(map-get($cyph-message-colors, app), text);

				@include mat-progress-spinner.theme(
					map-merge(
						$cyph-theme,
						(
							primary:
								map-merge(
									$cyph-primary,
									(
										default:
											map-get(
												map-get(
													$cyph-message-colors,
													app
												),
												spinner
											)
									)
								)
						)
					)
				);
			}

			&.author-local {
				background-color: map-get(
					map-get($cyph-message-colors, me),
					desktop
				);
				color: map-get(map-get($cyph-message-colors, me), text);

				@include mat-progress-spinner.theme(
					map-merge(
						$cyph-theme,
						(
							primary:
								map-merge(
									$cyph-primary,
									(
										default:
											map-get(
												map-get(
													$cyph-message-colors,
													me
												),
												spinner
											)
									)
								)
						)
					)
				);
			}

			&.author-remote {
				background-color: map-get(
					map-get($cyph-message-colors, other),
					desktop
				);
				color: map-get(map-get($cyph-message-colors, other), text);

				@include mat-progress-spinner.theme(
					map-merge(
						$cyph-theme,
						(
							primary:
								map-merge(
									$cyph-primary,
									(
										default:
											map-get(
												map-get(
													$cyph-message-colors,
													other
												),
												spinner
											)
									)
								)
						)
					)
				);
			}
		}
	}

	cyph-chat-message-box,
	cyph-chat-message-box-inherit-ng-form {
		.text-message-box {
			.message-box {
				color: map-get($cyph-message-box-colors, text);

				@if map-has-key($cyph-message-box-colors, background) {
					background-color: map-get(
						$cyph-message-box-colors,
						background
					);
				}
			}

			.message-box-button-group button mat-icon {
				color: map-get($cyph-message-box-colors, buttons);
			}

			&:not(.mobile) .message-box {
				@if map-has-key($cyph-message-box-colors, desktopBackground) {
					background-color: map-get(
						$cyph-message-box-colors,
						desktopBackground
					);
				}

				&:focus {
					box-shadow: 0 0 10px
						map-get($cyph-message-box-colors, desktopGlow);
					border: 1px solid
						map-get($cyph-message-box-colors, desktopGlow);
				}
			}

			&.mobile .message-box {
				@if map-has-key($cyph-message-box-colors, mobileBackground) {
					background-color: map-get(
						$cyph-message-box-colors,
						mobileBackground
					);
				}

				&:focus {
					box-shadow: 0 0 10px
						map-get($cyph-message-box-colors, mobileGlow);
					border: 1px solid
						map-get($cyph-message-box-colors, mobileGlow);
				}
			}
		}
	}

	cyph-checkout {
		.checkout-ui {
			color: map-get(map-get($cyph-checkout-theme, foreground), text);

			@include mat-form-field.theme($cyph-checkout-theme);
		}
	}

	ngx-speed-dial-actions {
		@include mat-button.theme($cyph-speed-dial-action-theme);
	}

	div.green-button {
		@include mat-button.theme(
			cyph-theme(
				$cyph-white,
				mat.define-palette(mat.$green-palette),
				$cyph-warn,
				$default-white,
				$default-white,
				true
			)
		);

		button {
			color: $default-white !important;
		}
	}

	div.red-button {
		@include mat-button.theme(
			cyph-theme(
				$cyph-white,
				mat.define-palette(mat.$red-palette),
				$cyph-warn,
				$default-white,
				$default-white,
				true
			)
		);

		button {
			color: $default-white !important;
		}
	}

	.alt {
		&.mat-fab,
		&.mat-mini-fab {
			background-color: $cyph-speed-dial-action-alt-background !important;
			color: $cyph-speed-dial-action-alt-foreground !important;
		}
	}

	.cyph-inverted-theme {
		@include cyph-inverted-theme;

		.cyph-main-theme {
			@include cyph-main-theme;
		}
	}

	@if $cyph-is-dark {
		.cyph-light-theme {
			@include cyph-inverted-theme;

			.cyph-main-theme {
				@include cyph-main-theme;
			}
		}
	}

	$cyph-theme-accent-default: map-get(map-get($cyph-theme, accent), default);

	$cyph-theme-primary-default: map-get(
		map-get($cyph-theme, primary),
		default
	);

	/* DevExtreme theme */

	.dx-button-mode-text.dx-button-default {
		color: $cyph-theme-primary-default !important;
	}

	.dx-checkbox-checked,
	.dx-checkbox-indeterminate {
		.dx-checkbox-icon {
			background-color: $cyph-theme-primary-default !important;
		}
	}

	.dx-datagrid-rowsview .dx-row-focused.dx-data-row {
		> td:not(.dx-focused) {
			background-color: $cyph-theme-accent-default !important;
		}

		> td:not(.dx-focused),
		&:not(.dx-row-lines) > td {
			border-color: $cyph-theme-accent-default !important;
		}
	}

	.dx-texteditor.dx-state-active:before,
	.dx-texteditor.dx-state-focused:before {
		border-bottom-color: $cyph-theme-primary-default !important;
	}

	/* Syncfusion theme */

	.e-btn:not(.e-flat).e-primary {
		background-color: $cyph-theme-primary-default !important;
	}

	.e-schedule .e-month-view .e-current-date .e-date-header,
	.e-btn:not(.e-flat).e-primary.e-active,
	.e-float-input.e-input-group:not(.e-float-icon-left) .e-float-line:before,
	.e-float-input.e-input-group:not(.e-float-icon-left) .e-float-line:after,
	.e-input-group:not(.e-float-icon-left):not(.e-float-input):before,
	.e-input-group:not(.e-float-icon-left):not(.e-float-input):after,
	input.e-control::selection {
		background-color: $cyph-theme-accent-default !important;
	}

	.e-schedule .e-schedule-toolbar .e-active-view .e-tbar-btn-text,
	.e-schedule .e-month-agenda-view .e-date-header-wrap table td.e-current-day,
	.e-schedule .e-month-view .e-date-header-wrap table td.e-current-day,
	.e-schedule .e-agenda-view .e-day-date-header.e-current-day,
	.e-schedule .e-vertical-view .e-header-cells.e-current-day,
	.e-schedule .e-vertical-view .e-header-cells.e-current-day,
	.e-schedule .e-vertical-view .e-current-time,
	.e-dropdownbase .e-list-item.e-active,
	.e-dropdownbase .e-list-item.e-active.e-hover,
	.e-btn.e-flat:not(.e-icon-btn):not(.e-close),
	.e-float-input.e-control-wrapper:not(.e-error).e-input-focus
		input
		~ label.e-float-text {
		color: $cyph-theme-accent-default !important;
	}

	.e-calendar .e-content td.e-selected span.e-day {
		background-color: $cyph-theme-primary-default !important;
		border-color: $cyph-theme-primary-default !important;
	}

	.e-schedule .e-vertical-view .e-previous-timeline,
	.e-schedule .e-vertical-view .e-current-timeline {
		border-color: $cyph-theme-primary-default !important;
	}

	.e-spinner-pane .e-spinner-inner .e-spin-material {
		stroke: $cyph-theme-primary-default !important;
	}

	.e-dropdown-btn:not(.e-tbar-btn) {
		background-color: map-get($cyph-accent, default);
		color: map-get($cyph-white, default);
	}
	ejs-splitbutton.e-split-btn-wrapper button:not(.e-dropdown-btn) {
		padding-left: 16px;
		padding-right: 12px;
	}
	.e-dropdown-popup li.e-item {
		width: 140px;
		justify-content: space-evenly;
	}
}

@mixin cyph-main-theme {
	$cyph-theme: cyph-theme-default();

	@include mat.all-legacy-component-themes($cyph-theme);
	@include cyph-progress-theme($cyph-theme, $cyph-progress-foreground);
}

@mixin cyph-progress-theme(
	$theme,
	$color: map-get(map-get($theme, foreground), base)
) {
	$cyph-progress-theme: map-merge(
		$theme,
		(
			primary:
				map-merge(
					map-get($theme, primary),
					(
						lighter: rgba(0, 0, 0, 0.15),
						default: $color
					)
				)
		)
	);

	@include mat-progress-bar.theme($cyph-progress-theme);
	@include mat-progress-spinner.theme($cyph-progress-theme);
}

@mixin cyph-inverted-theme {
	color: $cyph-inverted;

	@include mat.all-legacy-component-themes(cyph-theme-inverted());

	@if $cyph-is-dark {
		mat-card {
			background-color: rgba(255, 255, 255, 0.95);
		}
	}
}

@mixin theme-alt($theme, $theme-partial-inverted) {
	@include mat-autocomplete.theme($theme);
	@include mat-card.theme($theme);
	@include mat-dialog.theme($theme);
	@include mat-expansion-panel.theme($theme);
	@include mat-option.theme($theme);
	@include mat-select.theme($theme);
	@include mat-tabs.theme($theme);

	.mat-select-content,
	.mat-select-panel-done-animating,
	.sidenav {
		background-color: mat.get-color-from-palette(
			map-get($theme, background),
			card
		);
	}

	cyph-account-menu,
	mat-card,
	mat-dialog-container,
	mat-expansion-panel {
		@include mat-button.theme($theme);
		@include mat-checkbox.theme($theme);
		@include mat-chips.theme($theme);
		@include mat-expansion-panel.theme($theme);
		@include mat-form-field.theme($theme);
		@include mat-input.theme($theme);
		@include mat-list.theme($theme);
		@include cyph-progress-theme($theme-partial-inverted);
		@include mat-tabs.theme($theme-partial-inverted);

		$theme-foreground: map-get(
			map-get($theme-partial-inverted, foreground),
			base
		);

		.mat-tab-label-content {
			color: $theme-foreground;
		}

		.mat-tab-label-active {
			background-color: rgba($theme-foreground, 0.1);
		}
	}

	$theme-accent: map-get(map-get($theme, accent), default);

	.mat-tab-label-content {
		color: $theme-accent;
	}

	.mat-tab-label-active {
		background-color: rgba($theme-accent, 0.25);
	}
}

@function cyph-theme(
	$primary,
	$accent,
	$warn,
	$background,
	$foreground,
	$isDark
) {
	@return (
		primary: $primary,
		accent: $accent,
		warn: $warn,
		is-dark: $isDark,
		foreground:
			map-merge(
				if(
					$isDark,
					mat.$dark-theme-foreground-palette,
					mat.$light-theme-foreground-palette
				),
				(
					base: $foreground,
					icon: $foreground,
					icons: $foreground,
					text: $foreground
				)
			),
		background:
			map-merge(
				if(
					$isDark,
					map-merge(
						mat.$dark-theme-background-palette,
						(
							app-bar: map-get($primary, default),
							card: map-get($accent, default),
							dialog: map-get($accent, lighter),
							raised-button: map-get($primary, default),
							selected-button: map-get($accent, darker),
							status-bar:
								mat.get-color-from-palette($primary, 600)
						)
					),
					mat.$light-theme-background-palette
				),
				(
					background: $background
				)
			)
	);
}

@function cyph-theme-default() {
	@return cyph-theme(
		$cyph-primary,
		$cyph-accent,
		$cyph-warn,
		$cyph-background,
		$cyph-foreground,
		$cyph-is-dark
	);
}

@function cyph-theme-inverted() {
	@return cyph-theme(
		$cyph-primary,
		$cyph-accent,
		$cyph-warn,
		$cyph-foreground,
		$cyph-inverted,
		not $cyph-is-dark
	);
}

@function cyph-theme-partial-inverted() {
	@return cyph-theme(
		$cyph-primary,
		$cyph-accent,
		$cyph-warn,
		$cyph-foreground,
		$cyph-background,
		$cyph-is-dark
	);
}

@function invert-palette($base-palette) {
	@return map-merge(
		$base-palette,
		(
			50: map-get($base-palette, 900),
			100: map-get($base-palette, 800),
			200: map-get($base-palette, 700),
			300: map-get($base-palette, 600),
			400: map-get($base-palette, 500),
			500: map-get($base-palette, 400),
			600: map-get($base-palette, 300),
			700: map-get($base-palette, 200),
			800: map-get($base-palette, 100),
			900: map-get($base-palette, 50),
			A100: map-get($base-palette, A700),
			A200: map-get($base-palette, A400),
			A400: map-get($base-palette, A200),
			A700: map-get($base-palette, A100),
			contrast: (
				50: map-get(map-get($base-palette, contrast), 900),
				100: map-get(map-get($base-palette, contrast), 800),
				200: map-get(map-get($base-palette, contrast), 700),
				300: map-get(map-get($base-palette, contrast), 600),
				400: map-get(map-get($base-palette, contrast), 500),
				500: map-get(map-get($base-palette, contrast), 400),
				600: map-get(map-get($base-palette, contrast), 300),
				700: map-get(map-get($base-palette, contrast), 200),
				800: map-get(map-get($base-palette, contrast), 100),
				900: map-get(map-get($base-palette, contrast), 50),
				A100: map-get(map-get($base-palette, contrast), A700),
				A200: map-get(map-get($base-palette, contrast), A400),
				A400: map-get(map-get($base-palette, contrast), A200),
				A700: map-get(map-get($base-palette, contrast), A100)
			)
		)
	);
}
